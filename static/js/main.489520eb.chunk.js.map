{"version":3,"sources":["api/workoutApi.js","components/Card.jsx","components/WorkoutCards.jsx","App.js","serviceWorker.js","index.js"],"names":["getWorkouts","id","title","assetTitle","trainer","details","duration","distance","isSeries","tags","totalWorkouts","seriesWorkoutIds","Card","card","active","handleClick","onClick","className","tabIndex","style","backgroundImage","src","alt","href","WorkoutCards","workouts","api","useState","activeCardId","setActiveCardId","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.489520eb.chunk.js","sourcesContent":["/* \n  Example workout api, obviously the real thing would likely have some async calls to some endpoints to fetch this data\n  I would use the fetchApi and have some apiUtils to provide some abstraction like `defaultPost(data)` which would look \n  something like this:\n    export function defaultPost(payload) {\n      return {\n        method: 'POST',\n        body: JSON.stringify(payload),\n      };\n    }\n\n  then the fetch is as simple as `await fetch(url, defaultPost(payload));`\n}*/\n\n// Returns a list of all available workouts\n// TODO: Max P - Return only a certain number then load more as the user scrolls...\n// TODO: (cont) what if there are 1,000,000 workouts?\nexport function getWorkouts() {\n  return [\n    {\n      id: 0,\n      title: 'Lake Inniscarra, Ireland - Pyramid',\n      assetTitle: 'lake-inniscarra',\n      trainer: 'Jane Doe',\n      details: 'Lorem ipsum',\n      duration: '30:53',\n      distance: '6,248 M',\n      isSeries: false,\n      tags: ['Ireland', 'Pyramid', 'Jane Doe'],\n    },\n    {\n      id: 1,\n      title: 'Performance Series',\n      assetTitle: 'performance-series',\n      trainer: 'Jane Smith',\n      details: 'Lorem ipsum',\n      isSeries: true,\n      totalWorkouts: 9,\n      seriesWorkoutIds: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n      tags: ['Performance Series', 'Jane Smith'],\n    },\n    {\n      id: 2,\n      title: 'Slow Pulls and Fast Intervals',\n      assetTitle: 'slow-pulls',\n      trainer: 'Sasha Jacobs',\n      details: 'Lorem ipsum',\n      duration: '44:13',\n      distance: '9,948 M',\n      isSeries: false,\n      tags: ['Slow Pulls', 'Fast Intervals', 'Sasha Jacobs'],\n    },\n    {\n      id: 3,\n      title: '20 Minutes to Toned',\n      assetTitle: '20-minutes-to-toned',\n      trainer: 'John Doe',\n      details: 'Lorem ipsum',\n      isSeries: true,\n      totalWorkouts: 12,\n      seriesWorkoutIds: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      tags: ['Tone', '20 minutes', 'John Doe'],\n    },\n    {\n      id: 4,\n      title: 'Charles Race, Boston, Massachusetts',\n      assetTitle: 'charles-race',\n      trainer: 'Tommy Rivers Puzey',\n      details: 'Lorem ipsum',\n      duration: '36:22',\n      distance: '8,648 M',\n      isSeries: false,\n      tags: ['Tommy Rivers Puzey', 'Boston', 'Charles Race', 'Massachusetts'],\n    },\n    {\n      id: 5,\n      title: 'Full-Body HIIT Series',\n      assetTitle: 'full-body-hiit',\n      trainer: 'Sandra Johnson',\n      details: 'Lorem ipsum',\n      isSeries: true,\n      totalWorkouts: 12,\n      seriesWorkoutIds: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      tags: ['HIIT', 'Full-Body', 'Sandra Johnson'],\n    },\n    {\n      id: 6,\n      title: 'Kafue River, Zambia - Power Stroke Pyramid',\n      assetTitle: 'kafue-river',\n      trainer: 'Mark Mason',\n      details: 'Lorem ipsum',\n      duration: '22:22',\n      distance: '4,660 M',\n      isSeries: false,\n      tags: ['Kafue River', 'Zambia', 'Power Stroke Pyramid', 'Mark Mason'],\n    },\n    {\n      id: 7,\n      title: 'Shred & Burn Series',\n      assetTitle: 'shred-and-burn',\n      trainer: 'Tony Roberts',\n      details: 'Lorem ipsum',\n      isSeries: true,\n      totalWorkouts: 16,\n      seriesWorkoutIds: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n      tags: ['Shred', 'Burn', 'Tony Roberts'],\n    },\n  ];\n}\n\nexport default {\n  getWorkouts,\n};\n","import React from 'react';\n\nconst Card = ({ card, active, handleClick }) => {\n  return (\n    <div onClick={handleClick} className={`card ${active ? 'active' : ''}`} tabIndex=\"0\">\n      <div className=\"card-image-container\" style={{ backgroundImage: `url(/images/${card.assetTitle}-thumb.jpg)` }}>\n        {card.isSeries && (\n          <div className=\"card-info-series\">\n            <div className=\"card-text-large\">{card.totalWorkouts}</div>\n            <div className=\"card-text-minor\">Workouts</div>\n            <img src=\"/icons/menu.svg\" className=\"card-icon-menu\" alt=\"Expand series\" />\n          </div>\n        )}\n      </div>\n      <div className=\"card-info-container\">\n        <div className=\"card-title-container\">\n          <div className=\"card-title\">{card.title}</div>\n          <img src={`/images/${card.assetTitle}-trainer.jpg`} alt={card.trainer} className=\"card-trainer-image\" />\n        </div>\n        {!card.isSeries && (\n          <div className=\"card-detail-container\">\n            <div>\n              <img src=\"/icons/stopwatch.svg\" className=\"card-icon\" alt=\"Stopwatch icon\" />\n              {card.duration}\n            </div>\n            <div>\n              <img src=\"/icons/running-track.svg\" className=\"card-icon card-icon-distance\" alt=\"Distance icon\" />\n              {card.distance}\n            </div>\n          </div>\n        )}\n        {active && (\n          <div>\n            <a href=\"#\" className=\"card-view-details\">\n              View Details\n            </a>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState } from 'react';\nimport api from '../api/workoutApi';\nimport Card from '../components/Card';\n\nconst WorkoutCards = () => {\n  const workouts = api.getWorkouts();\n  // TODO: Max P - with this implementation and no additional functionality needed we could simply use CSS to achieve this...\n  const [activeCardId, setActiveCardId] = useState(-1);\n\n  const handleClick = (id) => {\n    setActiveCardId(id);\n  };\n\n  return (\n    <div className=\"card-container\">\n      {workouts.map((card) => (\n        <Card card={card} active={activeCardId === card.id} handleClick={() => handleClick(card.id)} key={card.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default WorkoutCards;\n","import React from 'react';\nimport WorkoutCards from './components/WorkoutCards';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorkoutCards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}